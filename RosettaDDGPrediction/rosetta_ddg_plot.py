#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode:nil; coding:utf-8 -*-

#    rosetta_ddg_plot.py
#
#    Plot aggregated data generated by running Rosetta protocols for
#    the calculation of the ΔΔG of stability/binding upon mutation.
#
#    Copyright (C) 2020 Valentina Sora 
#                       <sora.valentina1@gmail.com>
#                       Matteo Tiberti 
#                       <matteo.tiberti@gmail.com> 
#                       Elena Papaleo
#                       <elenap@cancer.dk>
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation, either version 3 of
#    the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public
#    License along with this program. 
#    If not, see <http://www.gnu.org/licenses/>.



# standard library
import argparse
import logging as log
import sys
# RosettaDDGProtocols
from .defaults import (
     CONFIGAGGRDIR,
     CONFIGAGGRFILE,
     CONFIGPLOTDIR,
     PLOTTYPES,
     ROSETTADFCOLS
)
from . import plotting
from . import util



def main():



    ######################### ARGUMENT PARSER #########################



    # set the argument parser
    parser = argparse.ArgumentParser()

    # add arguments
    i_help = "Input CSV file (aggregated data)."
    parser.add_argument("-i", "--infile", \
                        type = str, \
                        required = True, \
                        help = i_help)

    o_help = "Output file containing the plot."
    parser.add_argument("-o", "--outfile", \
                        type = str, \
                        required = True, \
                        help = o_help)

    ca_help = f"Configuration file used for data aggregation. " \
              f"If it is a name without extension, it is assumed " \
              f"to be the name of a YAML file in {CONFIGAGGRDIR}. " \
              f"Default is {CONFIGAGGRFILE}."
    parser.add_argument("-ca", "--configfile-aggregate", \
                        type = str, \
                        default = CONFIGAGGRFILE, 
                        help = ca_help)

    cp_help = \
        f"Configuration file for plotting. If it is a name " \
        f"without extension, it is assumed to be the name " \
        f"of a YAML file in {CONFIGPLOTDIR}."
    parser.add_argument("-cp", "--configfile-plot", \
                        type = str, \
                        required = True, 
                        help = cp_help)


    # parse the arguments
    args = parser.parse_args()
    # files
    infile = util.get_abspath(args.infile)
    outfile = util.get_abspath(args.outfile)
    # configuration files
    configfileplot = args.configfile_plot
    configfileaggr = args.configfile_aggregate



    ############################# LOGGING #############################



    # logging configuration
    log.basicConfig(level = log.INFO)



    ########################## CONFIGURATION ##########################


    
    # try to get the configuration for data aggregation
    try:
        configaggr = util.get_config_aggregate(configfileaggr)
    # if something went wrong, report it and exit
    except Exception as e:
        errstr = f"Could not parse {configfileaggr}: {e}"
        log.error(errstr)
        sys.exit(errstr)
    
    # try to get the plot+output configuration
    try:
        configplot = util.get_config_plot(configfileplot)
    # if something went wrong, report it and exit
    except Exception as e:
        errstr = f"Could not parse {configfileplot}: {e}"
        log.error(errstr)
        sys.exit(errstr)

    # get the plot type
    plottype = configplot["plot"]["type"]
    
    # get the plot options
    config = configplot["plot"]["options"]



    ######################### PLOT GENERATION #########################

 

    # get the configuration to be used when outputting the plot
    outconfig = configplot.get("output", {})

        
    # if the plot is a heatmap of total scores
    if plottype == "total_heatmap":
        # load the aggregated data
        df = plotting.load_aggregated_data(infile = infile)
        # plot the heatmap
        plotting.plot_total_heatmap(df = df, \
                                    config = config, \
                                    outfile = outfile, \
                                    outconfig = outconfig)

    # if the plot is a heatmap for a saturation mutagenesis scan
    elif plottype == "total_heatmap_saturation":
        # load the aggregated data
        df = plotting.load_aggregated_data(infile = infile, \
                                           saturation = True)
        # plot the 2D heatmap
        plotting.plot_total_heatmap(df = df, \
                                    config = config, \
                                    outfile = outfile, \
                                    outconfig = outconfig, \
                                    saturation = True)

    # if the plot is a barplot dividing the total ΔΔG score
    # into its energy contributions
    elif plottype == "contributions_barplot":
        # load the aggregated data
        df = plotting.load_aggregated_data(infile = infile)
        # get the scoring function name
        scfname = df[ROSETTADFCOLS["scfname"]].unique()[0]
        # get the list of energy cntributions for the scoring
        # function used
        contributions = configaggr["energy_contributions"][scfname]
        # plot the bar plot
        outconfig.pop("format")
        plotting.plot_contributions_barplot(\
                                    df = df, \
                                    config = config, \
                                    contributions = contributions, \
                                    outfile = outfile, \
                                    outconfig = outconfig)

    # if the plot is a swarmplot showing the distributions of
    # total ΔG scores for all wild-type and mutant structures
    elif plottype == "dg_swarmplot":
        # load the aggregated data
        df = plotting.load_aggregated_data(infile = infile)
        # plot the swarmplot 
        plotting.plot_dg_swarmplot(df = df, \
                                   config = config, \
                                   outfile = outfile, \
                                   outconfig = outconfig)

    # if an invalid plot type was passed, report it and exit
    else:
        errstr = f"Unrecognized plot type {plottype}."
        log.error(errstr)
        sys.exit(errstr)


if __name__ == "__main__":
    main()