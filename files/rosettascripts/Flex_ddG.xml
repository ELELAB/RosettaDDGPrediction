<ROSETTASCRIPTS>

  <SCOREFXNS>

    # define the unconstrained score function and set its weights
    <ScoreFunction name="sf" weights="%%sfweights%%"/>

    # define the constraned score function and set its weights
    <ScoreFunction name="sf_cst" weights="%%sfweights%%">

      # set the weight of the atom-atom constraints in the scoring function
      <Reweight scoretype="atom_pair_constraint" weight="1.0"/>

      # how much does the FA pair potential go out to (in A)?
      <Set fa_max_dis="9.0"/>
    
    </ScoreFunction>
  </SCOREFXNS>


  <TASKOPERATIONS>
    # read the input resfile
    # all residues must be set to be NATAA packable at top of resfile
    <ReadResfile name="res_mutate" filename="%%resfile%%"/>
  </TASKOPERATIONS>



  <RESIDUE_SELECTORS>
    
    # define the residue selectors with no fixed, no packable but designable residues
    <Task name="resselector" fixed="0" packable="0" designable="1" task_operations="res_mutate"/>

    # define a residue bubble neighborhood including all residues within 8 A
    <Neighborhood name="bubble" selector="resselector" distance="8.0"/>

    # define a primary sequence neighborhood including only the two immediately adjacent residues
    <PrimarySequenceNeighborhood name="bubble_adjacent" selector="bubble" lower="1" upper="1"/>

    # store the subset of selected residues
    <StoredResidueSubset name="restore_neighbor_shell" subset_name="neighbor_shell"/>

    # store the subset of NOT selected residues ("everythingelse")
    <Not name="everythingelse" selector="restore_neighbor_shell"/>
  
  </RESIDUE_SELECTORS>


  <TASKOPERATIONS>

    # repack only the selected residues
    <OperateOnResidueSubset name="repackonly" selector="restore_neighbor_shell">
      <RestrictToRepackingRLT/>
    </OperateOnResidueSubset>

    # do not repack everything else
    <OperateOnResidueSubset name="norepack" selector="everythingelse">
      <PreventRepackingRLT/>
    </OperateOnResidueSubset>

    # use the multi-cool annealer for simulated annealing, set to keep a history of the 6 best rotameric states visited
    <UseMultiCoolAnnealer name="multicool" states="6"/>

    # move only toward a lower cutoff for a number of neighbors withing 10 A qualifying to be considered buried
    <ExtraChiCutoff name="extrachizero" extrachi_cutoff="0"/>

    # reads command line options
    <InitializeFromCommandline name="commandline_init"/>

    # turn off design on selected positions
    <RestrictToRepacking name="restrict_to_repacking"/>
  </TASKOPERATIONS>

  <FILTERS>
  </FILTERS>

  <MOVERS>
    # store again the neighbor shell
    <StoreResidueSubset name="neighbor_shell_storer" subset_name="neighbor_shell" residue_selector="bubble_adjacent" />

    # add constraints:
    # - harmonic with width 1
    # - enabled for all atoms within 9 A from one another
    # - added with weight 1.0 to the Rosetta energy function
    <AddConstraintsToCurrentConformationMover name="addcst" use_distance_cst="1" coord_dev="0.5" min_seq_sep="0" max_distance="9" CA_only="1" bound_width="0.0" cst_weight="0.0"/>
    <ClearConstraintsMover name="clearcst"/>

    # minimizer:
    # - with Armijo inexact line search conditions
    # - with modified scoring function (constraints added)
    # - run until convergence (absolute score change lower than 1.0 REU)
    <MinMover name="minimize" scorefxn="sf_cst" chi="1" bb="1" type="lbfgs_armijo_nonmonotone" tolerance="0.000001" max_iter="5000" abs_score_convergence_threshold="1.0"/>

    # packing movers, one only to repack and the other also performing the mutation
    <PackRotamersMover name="repack" scorefxn="sf" task_operations="commandline_init,repackonly,norepack,multicool"/>
    <PackRotamersMover name="mutate" scorefxn="sf" task_operations="commandline_init,res_mutate,norepack,multicool"/>

    # report info to a database file
    <ReportToDB name="dbreport" batch_description="interface_ddG" database_name="%%ddgdbfile%%">
      <ScoreTypeFeatures/>
      <ScoreFunctionFeatures scorefxn="sf"/>
      <StructureScoresFeatures scorefxn="sf"/>
    </ReportToDB>

    # create a database for structural information (it is needed to reconstruct the atomic coordinates if generating output PDBs)
    <ReportToDB name="structreport" batch_description="interface_ddG_struct" database_name="%%structdbfile%%">
      
      # information about the confomation in a Pose
      <PoseConformationFeatures/>
      
      # data stored in a PDB format
      <PdbDataFeatures/>
      
      # data associated with the job
      <JobDataFeatures/>
     
      # information about each residue in a conformation
      <ResidueFeatures/>
      
      # textual information associated with a pose
      <PoseCommentsFeatures/>
      
      # conformation of each protein residue
      <ProteinResidueConformationFeatures/>
      
      # conformation of residues having canonical backbones but possibly noncanonical side chains
      <ResidueConformationFeatures/>
    </ReportToDB>

    # save poses
    <SavePoseMover name="save_wt_bound_pose" restore_pose="0" reference_name="wt_bound_pose"/>
    <SavePoseMover name="save_backrub_pose" restore_pose="0" reference_name="backrubpdb"/>
    <SavePoseMover name="restore_backrub_pose" restore_pose="1" reference_name="backrubpdb"/>

    # calculate the interface ddG score
    <InterfaceDdGMover name="int_ddG_mover" wt_ref_savepose_mover="save_wt_bound_pose" chain_name="%%chaintomove%%" db_reporter="dbreport" scorefxn="sf"/>

    # mover needed to generate the neighbor graph at the very beginning
    <ScoreMover name="apply_score" scorefxn="sf_cst" verbose="0"/>

    # wrapping up in a ParsedProtocol allows the ddG calculation to take place multiple times along the backrub trajectory, if desired
    <ParsedProtocol name="finish_ddg_post_backrub">
      <Add mover_name="save_backrub_pose"/>
      <Add mover_name="structreport"/>

      <Add mover_name="repack"/>

      <Add mover_name="addcst"/>
      <Add mover_name="minimize"/>
      <Add mover_name="clearcst"/>
      <Add mover_name="save_wt_bound_pose"/>
      <Add mover_name="structreport"/>
      <Add mover_name="restore_backrub_pose"/>

      <Add mover_name="mutate"/>

      <Add mover_name="addcst"/>
      <Add mover_name="minimize"/>
      <Add mover_name="clearcst"/>
      <Add mover_name="structreport"/>

      <Add mover_name="int_ddG_mover"/>
    </ParsedProtocol>

    # generation of a backrub trajectory
    <BackrubProtocol name="backrub" mc_kt="1.2" ntrials="350000" pivot_residue_selector="restore_neighbor_shell" task_operations="restrict_to_repacking,commandline_init,extrachizero" recover_low="0" trajectory_stride="7000" trajectory_apply_mover="finish_ddg_post_backrub"/>

  </MOVERS>
  <APPLY_TO_POSE>
  </APPLY_TO_POSE>
  <PROTOCOLS>
    <Add mover_name="addcst"/>
    # this mover is necessary to initialize the neighbor graph
    <Add mover_name="apply_score"/>
    <Add mover_name="neighbor_shell_storer"/>

    <Add mover_name="minimize"/>
    <Add mover_name="clearcst"/>

    <Add mover_name="backrub"/>
  </PROTOCOLS>
  <OUTPUT />
</ROSETTASCRIPTS>
